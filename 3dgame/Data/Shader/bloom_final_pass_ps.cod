//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// sampler_states[0]                 sampler      NA          NA             s0      1 
// texture_maps[0]                   texture  float4          2d             t0      1 
// texture_maps[1]                   texture  float4          2d             t1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.texcoord.x; v1.y <- pin.texcoord.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 21 "D:\ライブラリ\3dgame\HLSL\bloom\bloom_final_pass_ps.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z; r0.w <- color.w

#line 22
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t1.xyzw, s0
mov r1.xyz, r1.xyzx  // r1.x <- bloom.x; r1.y <- bloom.y; r1.z <- bloom.z

#line 24
add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- fragment_color.x; r0.y <- fragment_color.y; r0.z <- fragment_color.z

#line 25
mov r0.w, r0.w  // r0.w <- alpha

#line 28
nop 
mov r0.xyz, r0.xyzx

#line 14
dp3 r1.x, r0.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)  // r1.x <- luma

#line 15
add r1.y, r1.x, l(1.000000)
div r1.y, r1.x, r1.y  // r1.y <- tone_mapped_luma

#line 16
div r1.x, r1.y, r1.x
mul r0.xyz, r0.xyzx, r1.xxxx

#line 17
mov r0.xyz, r0.xyzx  // r0.x <- <reinhard_tone_mapping return value>.x; r0.y <- <reinhard_tone_mapping return value>.y; r0.z <- <reinhard_tone_mapping return value>.z

#line 28
mov r0.xyz, r0.xyzx  // r0.x <- fragment_color.x; r0.y <- fragment_color.y; r0.z <- fragment_color.z

#line 31
mov r1.x, l(0.384615)  // r1.x <- INV_GAMMA

#line 32
log r0.xyz, r0.xyzx
mul r0.xyz, r0.xyzx, r1.xxxx
exp r0.xyz, r0.xyzx  // r0.x <- fragment_color.x; r0.y <- fragment_color.y; r0.z <- fragment_color.z

#line 34
mov o0.xyz, r0.xyzx
mov o0.w, r0.w
ret 
// Approximately 21 instruction slots used
