//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer SCENE_CONSTANT_BUFFER
// {
//
//   float4 options;                    // Offset:    0 Size:    16 [unused]
//   float4 z_buffer_parameteres;       // Offset:   16 Size:    16 [unused]
//   float4 camera_position;            // Offset:   32 Size:    16 [unused]
//   float4 camera_direction;           // Offset:   48 Size:    16 [unused]
//   float4 camera_clip_distance;       // Offset:   64 Size:    16 [unused]
//   float4 viewport_size;              // Offset:   80 Size:    16 [unused]
//   row_major float4x4 view_transform; // Offset:   96 Size:    64 [unused]
//   row_major float4x4 projection_transform;// Offset:  160 Size:    64 [unused]
//   row_major float4x4 view_projection_transform;// Offset:  224 Size:    64 [unused]
//   row_major float4x4 inverse_view_transform;// Offset:  288 Size:    64 [unused]
//   row_major float4x4 inverse_projection_transform;// Offset:  352 Size:    64 [unused]
//   row_major float4x4 inverse_view_projection_transform;// Offset:  416 Size:    64
//   row_major float4x4 previous_view_projection_transform;// Offset:  480 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// SCENE_CONSTANT_BUFFER             cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xy w
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// WORLD_POSITION           0   xyzw        2     NONE   float   xyzw
// CLIP_POSITION            0   xyzw        3     NONE   float   xyzw
// CLIP_POSITION            1   xyzw        4     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB1[34], immediateIndexed
dcl_input v0.xyw
dcl_input v1.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_temps 5
//
// Initial variable locations:
//   v0.x <- position.x; v0.y <- position.y; v0.z <- position.z; v0.w <- position.w; 
//   v1.x <- color.x; v1.y <- color.y; v1.z <- color.z; v1.w <- color.w; 
//   v2.x <- texcoord.x; v2.y <- texcoord.y; 
//   o4.x <- <main return value>.previous_clip_position.x; o4.y <- <main return value>.previous_clip_position.y; o4.z <- <main return value>.previous_clip_position.z; o4.w <- <main return value>.previous_clip_position.w; 
//   o3.x <- <main return value>.current_clip_position.x; o3.y <- <main return value>.current_clip_position.y; o3.z <- <main return value>.current_clip_position.z; o3.w <- <main return value>.current_clip_position.w; 
//   o2.x <- <main return value>.world_position.x; o2.y <- <main return value>.world_position.y; o2.z <- <main return value>.world_position.z; o2.w <- <main return value>.world_position.w; 
//   o1.x <- <main return value>.color.x; o1.y <- <main return value>.color.y; o1.z <- <main return value>.color.z; o1.w <- <main return value>.color.w; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 6 "D:\ライブラリ\3dgame\HLSL\sky_box_vs.hlsl"
mov r0.z, l(1.000000)  // r0.z <- position.z

#line 7
mov r0.xyw, v0.xyxw  // r0.x <- vout.position.x; r0.y <- vout.position.y; r0.w <- vout.position.w
mov r0.z, r0.z  // r0.z <- vout.position.z

#line 8
mov r1.xyzw, v1.xyzw  // r1.x <- vout.color.x; r1.y <- vout.color.y; r1.z <- vout.color.z; r1.w <- vout.color.w

#line 11
mul r2.xyzw, v0.xxxx, cb1[26].xyzw
mul r3.xyzw, v0.yyyy, cb1[27].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, r0.zzzz, cb1[28].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, v0.wwww, cb1[29].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw  // r2.x <- vout.world_position.x; r2.y <- vout.world_position.y; r2.z <- vout.world_position.z; r2.w <- vout.world_position.w

#line 12
div r2.xyz, r2.xyzx, r2.wwww

#line 13
itof r2.w, l(1)

#line 16
mov r0.xyzw, r0.xyzw  // r0.x <- vout.current_clip_position.x; r0.y <- vout.current_clip_position.y; r0.z <- vout.current_clip_position.z; r0.w <- vout.current_clip_position.w

#line 17
mul r3.xyzw, r2.xxxx, cb1[30].xyzw
mul r4.xyzw, r2.yyyy, cb1[31].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, r2.zzzz, cb1[32].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, r2.wwww, cb1[33].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw  // r3.x <- vout.previous_clip_position.x; r3.y <- vout.previous_clip_position.y; r3.z <- vout.previous_clip_position.z; r3.w <- vout.previous_clip_position.w

#line 18
div r3.xyzw, r3.xyzw, r3.wwww

#line 19
mov o0.xyzw, r0.xyzw
mov o1.xyzw, r1.xyzw
mov o2.xyz, r2.xyzx
mov o2.w, r2.w
mov o3.xyzw, r0.xyzw
mov o4.xyzw, r3.xyzw
ret 
// Approximately 29 instruction slots used
